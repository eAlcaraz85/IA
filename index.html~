<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="es" xml:lang="es">
<head>
<!-- 2024-02-02 vie 13:31 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Apuntes IA</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Eduardo Alcaraz" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="src/readtheorg_theme/css/htmlize.css"/>
<link rel="stylesheet" type="text/css" href="src/readtheorg_theme/css/readtheorg.css"/>
<script type="text/javascript" src="src/lib/js/jquery.min.js"></script>
<script type="text/javascript" src="src/lib/js/bootstrap.min.js"></script>
<script type="text/javascript" src="src/lib/js/jquery.stickytableheaders.min.js"></script>
<script type="text/javascript" src="src/readtheorg_theme/js/readtheorg.js"></script>
<style> #content{max-width:1800px;}</style>
<style>pre.src {background-color: #303030; color: #e5e5e5;}</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="content">
<h1 class="title">Apuntes IA</h1>
<div id="table-of-contents">
<h2>&Iacute;ndice</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org04bfb27">Introducción a la Inteligencia Artificial</a>
<ul>
<li><a href="#org223a080">Introducción a la Inteligencia Artificial.</a>
<ul>
<li><a href="#orgc55f84b">Categorías de la Inteligencia Artificial</a></li>
<li><a href="#org4108f41">Inteligencia artificial convencional</a></li>
</ul>
</li>
<li><a href="#org76e63bf">Historia de la Inteligencia Artificial.</a></li>
<li><a href="#org0c542c3">Las habilidades cognoscitivas según la psicología. Teorías de la inteligencia (conductismo, Gardner, etc.).</a></li>
<li><a href="#orgf89cfa2">El proceso de razonamiento según la lógica (Axiomas, Teoremas, demostración).</a></li>
<li><a href="#orgc31d64e">El modelo de adquisición del conocimiento según la filosofía.</a></li>
<li><a href="#org9bd0802">El modelo cognoscitivo.</a></li>
<li><a href="#org6a52505">El modelo del agente inteligente, Sistemas Multi Agentes, Sistemas Ubicuos.</a></li>
<li><a href="#orgc94791d">El papel de la heurística.</a>
<ul>
<li><a href="#orgdc4bc5a">1.8.1 Algoritmos de exploración de alternativas.</a></li>
<li><a href="#org63b2294">1.8.2 Algoritmo A*.</a></li>
<li><a href="#org45c58d3">1.8.3 Algoritmos de búsqueda local.</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org534b3d8">Análisis de información</a>
<ul>
<li><a href="#orgb6f069a">Programación</a>
<ul>
<li><a href="#org08f7ed1">Carga de imágenes y propiedades</a></li>
<li><a href="#orgdabaea1">Operadores Puntuales</a></li>
<li><a href="#org2257081">Modelos de color</a></li>
<li><a href="#org7e411d8">Segmentación de Color</a></li>
<li><a href="#org986e519">Haarcascades</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org42b6946">Espacio de estados</a>
<ul>
<li><a href="#orgb2d0ed6">Ejemplo de espacio de estados</a>
<ul>
<li><a href="#org4874980">Descripción del problema</a></li>
<li><a href="#orgc2e9b8d">Representación de las configuraciones del universo del problema:</a></li>
<li><a href="#orgdb4a306">Definición de las reglas de transición:</a></li>
<li><a href="#org9a0ed44">Generación del espacio de estados</a></li>
<li><a href="#org9bdf8c2">Problemas de los Canibales y Monjes</a></li>
<li><a href="#org3f85132">El espacio de estados está definido por</a></li>
</ul>
</li>
<li><a href="#org8a36c2b">Representación de espacio de estados</a></li>
<li><a href="#orga660bda">El problema del n-Puzzle</a>
<ul>
<li><a href="#org228d3b0">Caracterización de las búsquedas ciegas.</a></li>
<li><a href="#org2e032c8">Caracterización de las búsquedas heurísticas.</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgd3d16fd">Técnicas de Búsqueda</a>
<ul>
<li><a href="#orgbbd73db">Solución de problemas con búsqueda.</a></li>
<li><a href="#org88872a0">Espacios de Estados</a>
<ul>
<li><a href="#orgdc59bce">Deterministicos</a></li>
<li><a href="#org9390cf3">No Deterministicos</a></li>
</ul>
</li>
<li><a href="#org7099a06">Métodos de Búsqueda</a>
<ul>
<li><a href="#orgfec89b4">Primero en anchura (breadthfirst)</a></li>
<li><a href="#orgda59fd4">Primero en profundidad (depthfirst).</a></li>
<li><a href="#orgb00e139">Búsqueda Heurística</a></li>
</ul>
</li>
<li><a href="#orgf064401">Satisfacción de restricciones.</a></li>
</ul>
</li>
<li><a href="#orgad53e64">Teoría de juegos.</a></li>
<li><a href="#orgfc5d166">Grafos</a></li>
<li><a href="#org8634b1d">Tipos de grafos</a></li>
<li><a href="#orgf36b044">Machine Learning</a>
<ul>
<li><a href="#org8419ce6">Tipos de Algoritmos</a></li>
<li><a href="#orga79da67">Técnicas de clasificación</a></li>
<li><a href="#orgb410667">Clasificador en Cascada</a>
<ul>
<li><a href="#org6cae5d1">Ejemplo de clasificación utilizando Haarcascades</a></li>
</ul>
</li>
<li><a href="#orge6165ff">Segmentación de Color</a></li>
<li><a href="#org38777dc">Árboles de decisión</a>
<ul>
<li><a href="#org6687fe5">Elementos</a></li>
<li><a href="#org5f1f95d">Algunas ventajas de los árboles de decisión son:</a></li>
<li><a href="#org78a97ff">Desventajas de los árboles de decisión:</a></li>
<li><a href="#org7c88607">Ejemplo de Clasificación, Árbol de decisión scikit-learn</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgcfa6069">Bibliografía</a></li>
</ul>
</div>
</div>


<div id="outline-container-org04bfb27" class="outline-2">
<h2 id="org04bfb27">Introducción a la Inteligencia Artificial</h2>
<div class="outline-text-2" id="text-org04bfb27">
</div>
<div id="outline-container-org223a080" class="outline-3">
<h3 id="org223a080">Introducción a la Inteligencia Artificial.</h3>
<div class="outline-text-3" id="text-org223a080">
<p>
La inteligencia artificial (IA) es un área multidisciplinaria que, a
  través de ciencias como las ciencias de la computación, la lógica y la
  filosofía, estudia la creación y diseño de entidades capaces de
  resolver cuestiones por sí mismas utilizando como paradigma la
  inteligencia humana.
</p>


<p>
General y amplio como eso, reúne a amplios campos, los cuales tienen
en común la creación de máquinas capaces de pensar. En ciencias de la
computación se denomina inteligencia artificial a la capacidad de
razonar de un agente no vivo. John McCarthy acuñó la expresión
inteligencia artificial en 1956, y la definió así: Es la ciencia e
ingenio de hacer máquinas inteligentes, especialmente programas de
cómputo inteligentes.
</p>

<ul class="org-ul">
<li>Búsqueda del estado requerido en el conjunto de los estados
producidos por las acciones posibles.</li>
<li>Algoritmos genéticos (análogo al proceso de evolución de las cadenas
de ADN).</li>
<li>Redes neuronales artificiales (análogo al funcionamiento físico del
cerebro de animales y humanos).</li>
<li>Razonamiento mediante una lógica formal análogo al pensamiento
abstracto humano.</li>
</ul>


<p>
También existen distintos tipos de percepciones y acciones, que pueden
ser obtenidas y producidas, respectivamente, por sensores físicos y
sensores mecánicos en máquinas, pulsos eléctricos u ópticos en
computadoras, tanto como por entradas y salidas de bits de un software
y su entorno software.
Varios ejemplos se encuentran en el área de control de sistemas,
planificación automática, la habilidad de responder a diagnósticos y a
consultas de los consumidores, reconocimiento de escritura,
reconocimiento del habla y reconocimiento de patrones. Los sistemas de
IA actualmente son parte de la rutina en campos como economía,
medicina, ingeniería y la milicia, y se ha usado en gran variedad de
aplicaciones de software, juegos de estrategia, como ajedrez de
computador, y otros videojuegos.
</p>
</div>

<div id="outline-container-orgc55f84b" class="outline-4">
<h4 id="orgc55f84b">Categorías de la Inteligencia Artificial</h4>
<div class="outline-text-4" id="text-orgc55f84b">
<ul class="org-ul">
<li><b>Sistemas que piensan como humanos</b>. Estos sistemas tratan de emular
el pensamiento humano; por ejemplo las redes neuronales
artificiales. La automatización de actividades que vinculamos con
procesos de pensamiento humano, actividades como la Toma de
decisiones, Resolución de problemas y aprendizaje. <a class='org-ref-reference' href="#Russell">Russell</a></li>
<li><b>Sistemas que actúan como humanos</b>: Estos sistemas tratan de actuar
como humanos; es decir, imitan el comportamiento humano; por
ejemplo la robótica. El estudio de cómo lograr que los
computadores realicen tareas que, por el momento, los humanos hacen mejor. <a class='org-ref-reference' href="#Russell">Russell</a></li>
<li><b>Sistemas que piensan racionalmente</b>.- Es decir, con lógica (idealmente), tratan de
imitar o emular el pensamiento lógico racional del ser humano; por ejemplo los sistemas
expertos. El estudio de los cálculos que hacen posible percibir, razonar y actuar. <a class='org-ref-reference' href="#Russell">Russell</a></li>
<li><b>Sistemas que actúan racionalmente (idealmente)</b>.– Tratan de emular de forma
racional el comportamiento humano; por ejemplo los agentes inteligentes.Está relacionado con
conductas inteligentes en artefactos. <a class='org-ref-reference' href="#Russell">Russell</a></li>
</ul>
</div>
</div>

<div id="outline-container-org4108f41" class="outline-4">
<h4 id="org4108f41">Inteligencia artificial convencional</h4>
<div class="outline-text-4" id="text-org4108f41">
<p>
Se conoce también como IA simbólico-deductiva. Está basada en el análisis formal y
estadístico del comportamiento humano ante diferentes problemas:
</p>

<ul class="org-ul">
<li>Razonamiento basado en casos: Ayuda a tomar decisiones mientras se
resuelven ciertos problemas concretos y, aparte de que son muy
importantes, requieren de un buen funcionamiento.</li>
<li>Sistemas expertos: Infieren una solución a través del conocimiento
previo del contexto en que se aplica y ocupa de ciertas reglas o
relaciones.</li>
<li>Redes bayesianas: Propone soluciones mediante inferencia probabilística.</li>
<li>Inteligencia artificial basada en comportamientos: Esta
inteligencia contiene autonomía y puede auto-regularse y
controlarse para mejorar.</li>
<li>Smart process management: Facilita la toma de decisiones
complejas, proponiendo una solución a un determinado problema al
igual que lo haría un especialista en la dicha actividad.</li>
</ul>
</div>
</div>
</div>



<div id="outline-container-org76e63bf" class="outline-3">
<h3 id="org76e63bf">Historia de la Inteligencia Artificial.</h3>
</div>
<div id="outline-container-org0c542c3" class="outline-3">
<h3 id="org0c542c3">Las habilidades cognoscitivas según la psicología. Teorías de la inteligencia (conductismo, Gardner, etc.).</h3>
</div>
<div id="outline-container-orgf89cfa2" class="outline-3">
<h3 id="orgf89cfa2">El proceso de razonamiento según la lógica (Axiomas, Teoremas, demostración).</h3>
</div>
<div id="outline-container-orgc31d64e" class="outline-3">
<h3 id="orgc31d64e">El modelo de adquisición del conocimiento según la filosofía.</h3>
</div>
<div id="outline-container-org9bd0802" class="outline-3">
<h3 id="org9bd0802">El modelo cognoscitivo.</h3>
</div>
<div id="outline-container-org6a52505" class="outline-3">
<h3 id="org6a52505">El modelo del agente inteligente, Sistemas Multi Agentes, Sistemas Ubicuos.</h3>
</div>
<div id="outline-container-orgc94791d" class="outline-3">
<h3 id="orgc94791d">El papel de la heurística.</h3>
<div class="outline-text-3" id="text-orgc94791d">
</div>
<div id="outline-container-orgdc4bc5a" class="outline-4">
<h4 id="orgdc4bc5a">1.8.1 Algoritmos de exploración de alternativas.</h4>
</div>
<div id="outline-container-org63b2294" class="outline-4">
<h4 id="org63b2294">1.8.2 Algoritmo A*.</h4>
<div class="outline-text-4" id="text-org63b2294">
</div>
<ul class="org-ul">
<li><a id="org91c0d9c"></a>Algoritmo A*<br />
<div class="outline-text-5" id="text-org91c0d9c">
<p>
La heurística de búsqueda A* (pronunciado "A asterisco", "A estrella"
o "A star" en inglés) se clasifica dentro de los algoritmos de
búsqueda en grafos de tipo heurístico o informado. Presentado por
primera vez en 1968 por Peter E. Hart, Nils J. Nilsson y Bertram
Raphael, el algoritmo A* encuentra, siempre y cuando se cumplan unas
determinadas condiciones, el camino de menor coste entre un nodo
origen y uno objetivo.
</p>
</div>
</li>
</ul>
</div>


<div id="outline-container-org45c58d3" class="outline-4">
<h4 id="org45c58d3">1.8.3 Algoritmos de búsqueda local.</h4>
</div>
</div>
</div>





<div id="outline-container-org534b3d8" class="outline-2">
<h2 id="org534b3d8">Análisis de información</h2>
<div class="outline-text-2" id="text-org534b3d8">
</div>
<div id="outline-container-orgb6f069a" class="outline-3">
<h3 id="orgb6f069a">Programación</h3>
<div class="outline-text-3" id="text-orgb6f069a">
</div>
<div id="outline-container-org08f7ed1" class="outline-4">
<h4 id="org08f7ed1">Carga de imágenes y propiedades</h4>
<div class="outline-text-4" id="text-org08f7ed1">
<p>
Con el siguiente ejemplo, se puede cargar una imagen, utilizando la
librería de opencv, mediante el método <a href="https://docs.opencv.org/3.4/d4/da8/group__imgcodecs.html">imread</a>, el cual carga en la
variable <b><b>img</b></b> la imagen contenida en el directorio que se puede
observar en la linea 2 de igual forma el método <a href="https://www.geeksforgeeks.org/python-opencv-cv2-imshow-method/">imshow</a> permite mostrar
la imagen, dando como primer parámetro, el nombre del marco y
posteriormente el nombre de la imagen, finalmente se utiliza el método
<a href="https://www.geeksforgeeks.org/python-opencv-waitkey-function/">waitKey</a> permite  mostrar una ventana durante un número
específico de milisegundos o hasta que se presione cualquier tecla, a su vez 
la el método <a href="https://www.geeksforgeeks.org/python-opencv-destroyallwindows-function/">destroyAllWindows</a> permite destruir todas las ventanas abiertas 
creadas por <b><b>imshow</b></b>. 
</p>



<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">import</span> cv2 <span style="color: #51afef;">as</span> cv 
<span style="color: #DFDFDF;">img</span> = cv.imread<span style="color: #51afef;">(</span><span style="color: #7bc275;">"/home/likcos/Im&#225;genes/tr.png"</span><span style="color: #51afef;">)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'marco'</span>, img<span style="color: #51afef;">)</span>
cv.waitKey<span style="color: #51afef;">()</span>
cv.destroyAllWindows<span style="color: #51afef;">()</span>
</pre>
</div>

<p>
Opencv también permite acceder a las propiedades de la imagen mediante
la función <a href="https://docs.opencv.org/3.4/d3/df2/tutorial_py_basic_ops.html">shape</a>, con la cual podremos acceder al tamaño de la imagen,
los canales de color entre otras propiedades. En el ejemplo siguiente
se muestra como al cargar la imagen utilizando la bandera de <b><b>1</b></b>
podemos acceder al ancho, alto y al numero de canales de color de la
imagen. En caso de cargar la imagen utilizando el <b><b>0</b></b>, <b><b>shape</b></b>
solo podrá acceder al alto, ancho de la imagen.
</p>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">import</span> cv2 <span style="color: #51afef;">as</span> cv 
<span style="color: #DFDFDF;">img</span> = cv.imread<span style="color: #51afef;">(</span><span style="color: #7bc275;">"/home/likcos/Im&#225;genes/tr.png"</span>,1<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">w</span>,<span style="color: #DFDFDF;">h</span>,<span style="color: #DFDFDF;">c</span> = img.shape
<span style="color: #51afef;">print</span><span style="color: #51afef;">(</span>w,h,c<span style="color: #51afef;">)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'marco'</span>, img<span style="color: #51afef;">)</span>
cv.waitKey<span style="color: #51afef;">()</span>
cv.destroyAllWindows<span style="color: #51afef;">()</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-orgdabaea1" class="outline-4">
<h4 id="orgdabaea1">Operadores Puntuales</h4>
<div class="outline-text-4" id="text-orgdabaea1">
<p>
De igual forma cargando la imagen, en un solo canal es posible aplicar
operadores puntuales a la imagen. Las operaciones puntuales son
transformaciones de uno a uno, es decir el nuevo valor de un pixel 'q'
en la posición ( i , j ) esta en función de un pixel 'p' de otra
imagen pero en la misma posición, es decir, ( i , j ).
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">import</span> cv2 <span style="color: #51afef;">as</span> cv
<span style="color: #51afef;">import</span> numpy <span style="color: #51afef;">as</span> np

<span style="color: #DFDFDF;">img</span> = cv.imread<span style="color: #51afef;">(</span><span style="color: #7bc275;">'tr.png'</span>, 0<span style="color: #51afef;">)</span>
<span style="color: #51afef;">print</span><span style="color: #51afef;">(</span>img.shape, img.size<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">w</span> = img.shape<span style="color: #51afef;">[</span>0<span style="color: #51afef;">]</span>
<span style="color: #DFDFDF;">h</span> = img.shape<span style="color: #51afef;">[</span>1<span style="color: #51afef;">]</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">c = img.shape[2]</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">w1, h1 = img.shape</span>
<span style="color: #DFDFDF;">img2</span> = img
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'imagen'</span>, img2<span style="color: #51afef;">)</span>
<span style="color: #51afef;">for</span> x <span style="color: #51afef;">in</span> <span style="color: #C57BDB;">range</span><span style="color: #51afef;">(</span>w<span style="color: #51afef;">)</span>:
    <span style="color: #51afef;">for</span> y <span style="color: #51afef;">in</span> <span style="color: #C57BDB;">range</span><span style="color: #51afef;">(</span>h<span style="color: #51afef;">)</span>:
        <span style="color: #51afef;">if</span><span style="color: #51afef;">(</span>img<span style="color: #C57BDB;">[</span>x,y<span style="color: #C57BDB;">]</span>&gt;50<span style="color: #51afef;">)</span>:
            <span style="color: #DFDFDF;">img</span><span style="color: #51afef;">[</span>x,y<span style="color: #51afef;">]</span>=255
        <span style="color: #51afef;">else</span>:
            <span style="color: #DFDFDF;">img</span><span style="color: #51afef;">[</span>x,y<span style="color: #51afef;">]</span>=0

cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'imagen1'</span>, img<span style="color: #51afef;">)</span>
cv.waitKey<span style="color: #51afef;">(</span>0<span style="color: #51afef;">)</span>
cv.destroyAllWindows<span style="color: #51afef;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org2257081" class="outline-4">
<h4 id="org2257081">Modelos de color</h4>
<div class="outline-text-4" id="text-org2257081">
<p>
El color es una de las características que nos permite a los seres
humanos identificar y clasificar los objetos. La percepción visual del
color se genera en nuestro cerebro a partir de las ondas
electromagnéticas reflejadas por los objetos y captadas por los ojos.
Desde el punto de vista del procesamiento de imágenes por computador,
es preciso recurrir a los llamados espacios de color, se trata de
conjuntos de fórmulas matemáticas que permiten describir los colores y
descomponerlos en distintos canales. Los espacios de color más
utilizados son el RGB y el CMYK, debido a que el modelo RGB se utiliza
en periféricos como pantallas, cámaras y escáneres, y el modelo CMYK
en impresoras. En este capítulo se analizará también el sistema de
coordenadas tridimensional (tono, saturación e intensidad) del espacio
de color HSI, donde cada color está representado por un punto en el
espacio. Los dos espacios siguientes que se estudiarán fueron
establecidos por la Comisión Internacional de Iluminación (CIE): el
espacio de color XYZ se usa actualmente como referencia para definir
los colores que percibe el ojo humano, mientras que el Lab se puede
considerar como el más completo de los desarrollados por la CIE, ya
que permite identificar cada color de una forma muy precisa mediante
sus valores “a” y “b” y su brillo (“L”).  Finalmente, se analizará el
espacio de color YCbCr.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #DFDFDF;">img</span> = cv.imread<span style="color: #51afef;">(</span><span style="color: #7bc275;">'tr.png'</span>, 1<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">img2</span> = cv.cvtColor<span style="color: #51afef;">(</span>img, cv.COLOR_BGR2RGB<span style="color: #51afef;">)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'img'</span>, img<span style="color: #51afef;">)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'img2'</span>, img2<span style="color: #51afef;">)</span>

<span style="color: #DFDFDF;">zero</span> = np.zeros<span style="color: #51afef;">(</span>img.shape<span style="color: #C57BDB;">[</span>:2<span style="color: #C57BDB;">]</span>, dtype=<span style="color: #7bc275;">'uint8'</span><span style="color: #51afef;">)</span>
<span style="color: #51afef;">(</span>r,g,b<span style="color: #51afef;">)</span>= cv.split<span style="color: #51afef;">(</span>img<span style="color: #51afef;">)</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imshow('rg', r)</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imshow('gg', g)</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imshow('bg', b)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'GRB'</span>, cv.merge<span style="color: #C57BDB;">(</span><span style="color: #7bc275;">[</span>g,r,b<span style="color: #7bc275;">]</span><span style="color: #C57BDB;">)</span><span style="color: #51afef;">)</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imshow('G', cv.merge([zero,g,zero]))</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imshow('R', cv.merge([zero,zero,r]))</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">(r1,g1,b1)= cv.split(img2)</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imshow('R1', cv.merge([r1,zero,zero]))</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imshow('G1', cv.merge([zero,g1,zero]))</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imshow('B1', cv.merge([zero,zero,b1]))</span>

cv.waitKey<span style="color: #51afef;">(</span>0<span style="color: #51afef;">)</span>
cv.destroyAllWindows<span style="color: #51afef;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org7e411d8" class="outline-4">
<h4 id="org7e411d8">Segmentación de Color</h4>
<div class="outline-text-4" id="text-org7e411d8">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #DFDFDF;">img</span> = cv.imread<span style="color: #51afef;">(</span><span style="color: #7bc275;">'man1.jpg'</span>, 1<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">img2</span> = cv.cvtColor<span style="color: #51afef;">(</span>img, cv.COLOR_BGR2RGB<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">img3</span> = cv.cvtColor<span style="color: #51afef;">(</span>img2, cv.COLOR_RGB2HSV<span style="color: #51afef;">)</span>

<span style="color: #DFDFDF;">umbralBajo</span>=<span style="color: #51afef;">(</span>0, 80, 80  <span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">umbralAlto</span>=<span style="color: #51afef;">(</span>10, 255, 255<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">umbralBajoB</span>=<span style="color: #51afef;">(</span>170, 80,80<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">umbralAltoB</span>=<span style="color: #51afef;">(</span>180, 255, 255<span style="color: #51afef;">)</span>


<span style="color: #DFDFDF;">mascara1</span> = cv.inRange<span style="color: #51afef;">(</span>img3, umbralBajo, umbralAlto<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">mascara2</span> = cv.inRange<span style="color: #51afef;">(</span>img3, umbralBajoB, umbralAltoB<span style="color: #51afef;">)</span>

<span style="color: #DFDFDF;">mascara</span> = mascara1 + mascara2

<span style="color: #DFDFDF;">resultado</span> = cv.bitwise_and<span style="color: #51afef;">(</span>img, img, mask=mascara<span style="color: #51afef;">)</span>

cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'resultado'</span>, resultado<span style="color: #51afef;">)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'mascara'</span>, mascara<span style="color: #51afef;">)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'img'</span>,img<span style="color: #51afef;">)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'img2'</span>, img2<span style="color: #51afef;">)</span>
cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'img3'</span>, img3<span style="color: #51afef;">)</span>

cv.waitKey<span style="color: #51afef;">(</span>0<span style="color: #51afef;">)</span>
cv.destroyAllWindows<span style="color: #51afef;">()</span>
</pre>
</div>
</div>
</div>



<div id="outline-container-org986e519" class="outline-4">
<h4 id="org986e519">Haarcascades</h4>
<div class="outline-text-4" id="text-org986e519">
<p>
<a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">Haarcascades</a>
</p>

<p>
La detección de objetos utilizando clasificadores en cascada basados
en características Haar es un método efectivo de detección de objetos
propuesto por Paul Viola y Michael Jones en su artículo "Detección
rápida de objetos utilizando un conjunto potenciado de características
simples" en 2001. Se trata de un enfoque basado en aprendizaje
automático donde se entrena una función en cascada a partir de muchas
imágenes positivas y negativas. Luego se utiliza para detectar objetos
en otras imágenes.
</p>

<p>
Aquí trabajaremos con la detección de rostros. Inicialmente, el
algoritmo necesita muchas imágenes positivas (imágenes de rostros) y
negativas (imágenes sin rostros) para entrenar el clasificador. Luego,
necesitamos extraer características de ellas. Para ello, se utilizan
las características Haar mostradas en la imagen de abajo. Son
similares a nuestros núcleos de convolución. Cada característica es un
valor único obtenido restando la suma de los píxeles bajo el
rectángulo blanco de la suma de los píxeles bajo el rectángulo negro.
</p>

<p>
<a href="https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html">Haarcascades</a>
</p>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">import</span> numpy <span style="color: #51afef;">as</span> np
<span style="color: #51afef;">import</span> cv2 <span style="color: #51afef;">as</span> cv
<span style="color: #51afef;">import</span> math 

<span style="color: #DFDFDF;">rostro</span> = cv.CascadeClassifier<span style="color: #51afef;">(</span><span style="color: #7bc275;">'haarcascade_frontalface_alt.xml'</span><span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">cap</span> = cv.VideoCapture<span style="color: #51afef;">(</span>0<span style="color: #51afef;">)</span>
<span style="color: #51afef;">while</span> <span style="color: #a991f1;">True</span>:
    <span style="color: #DFDFDF;">ret</span>, <span style="color: #DFDFDF;">frame</span> = cap.read<span style="color: #51afef;">()</span>
    <span style="color: #DFDFDF;">gray</span> = cv.cvtColor<span style="color: #51afef;">(</span>frame, cv.COLOR_BGR2GRAY<span style="color: #51afef;">)</span>
    <span style="color: #DFDFDF;">rostros</span> = rostro.detectMultiScale<span style="color: #51afef;">(</span>gray, 1.3, 5<span style="color: #51afef;">)</span>
    <span style="color: #51afef;">for</span><span style="color: #51afef;">(</span>x, y, w, h<span style="color: #51afef;">)</span> <span style="color: #51afef;">in</span> rostros:
        <span style="color: #DFDFDF;">frame</span> = cv.rectangle<span style="color: #51afef;">(</span>frame, <span style="color: #C57BDB;">(</span>x,y<span style="color: #C57BDB;">)</span>, <span style="color: #C57BDB;">(</span>x+w, y+h<span style="color: #C57BDB;">)</span>, <span style="color: #C57BDB;">(</span>255, 0, 0<span style="color: #C57BDB;">)</span>, 5<span style="color: #51afef;">)</span>
    cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'rostros'</span>, frame<span style="color: #51afef;">)</span>
    <span style="color: #DFDFDF;">k</span> = cv.waitKey<span style="color: #51afef;">(</span>1<span style="color: #51afef;">)</span>
    <span style="color: #51afef;">if</span> k == 27:
        <span style="color: #51afef;">break</span>
cap.release<span style="color: #51afef;">()</span>
cv.destroyAllWindows<span style="color: #51afef;">()</span>
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-org42b6946" class="outline-2">
<h2 id="org42b6946">Espacio de estados</h2>
<div class="outline-text-2" id="text-org42b6946">
<p>
Muchos de los problemas que pueden ser resueltos aplicando técnicas de
inteligencia artificial se modelan en forma simbólica y discreta
definiendo las configuraciones posibles del universo estudiado.  El
problema se plantea entoces en términos de encontrar una configuración
objetivo a partir de una configuración inicial dada, aplicando
transformaciones válidas según el modelo del universo.  La respuesta
es la secuencia de transformaciones cuya aplicación succesiva lleva a
la configuración deseada.
</p>

<p>
Los ejemplos más carácteristicos de esta categoría de problemas son
los juegos (son universos restringidos fáciles de modelar). En un
juego, las configuraciones del universo corresponden directamente a
las configuraciones del tablero. Cada configuración es un estado que
puede ser esquematizado gráficamente y representado en forma
simbólica. Las transformaciones permitidas corresponden a las reglas o
movidas del juego, formalizadas como transiciones de estado.
</p>

<p>
Entonces, para plantear formalmente un problema, se requiere precisar
una representación simbólica de los estados y definir reglas del tipo
condición acción para cada una de las transiciones válidas dentro del
universo modelado. La acción de una regla indica como modificar el
estado actual para generar un nuevo estado.  La condición impone
restricciones sobre la aplicabilidad de la regla según el estado
actual, el estado generado o la historia completa del proceso de
solución.
</p>

<p>
El espacio de estados de un juego es un grafo cuyos nodos representan
las configuraciones alcanzables (los estados válidos) y cuyos arcos
explicitan las movidas posibles (las transiciones de estado).  En
principio, se puede construir cualquier espacio de estados partiendo
del estado inicial, aplicando cada una de las reglas para generar los
sucesores immediatos, y así succesivamente con cada uno de los nuevos
estados generados (en la práctica, los espacios de estados suelen ser
demasiado grandes para explicitarlos por completo).
</p>

<p>
Cuando un problema se puede representar mediante un espacio de
estados, la solución computacional correspende a encontrar un camino
desde el estado inicial a un estado objetivo.
</p>
</div>

<div id="outline-container-orgb2d0ed6" class="outline-3">
<h3 id="orgb2d0ed6">Ejemplo de espacio de estados</h3>
<div class="outline-text-3" id="text-orgb2d0ed6">
</div>
<div id="outline-container-org4874980" class="outline-4">
<h4 id="org4874980">Descripción del problema</h4>
<div class="outline-text-4" id="text-org4874980">
<p>
Un arriero se encuentra en el borde de un rio llevando un puma, una
cabra y una lechuga.  Debe cruzar a la otra orilla por medio de un
bote con capacidad para dos (el arriero y alguna de sus
pertenecias). La dificultad es que si el puma se queda solo con la
cabra la devorará, y lo mismo sucederá si la cabra se queda sola con
la lechuga. ¿Cómo cruzar sin perder ninguna pertenencia?
</p>
</div>
</div>

<div id="outline-container-orgc2e9b8d" class="outline-4">
<h4 id="orgc2e9b8d">Representación de las configuraciones del universo del problema:</h4>
<div class="outline-text-4" id="text-orgc2e9b8d">
<p>
Basta precisar la situación antes o después de cruzar. El arriero y
cada una de sus pertenencias tienen que estar en alguna de las dos
orillas. La representación del estado debe entonces indicar en que
lado se encuentra cada uno de ellos. Para esto se puede utilizar un
término simbólico con la siguiente sintáxis: estado(A,P,C,L), en que
A, P, C y L son variables que representan, respectivamente, la
posición del arriero, el puma, la cabra y la lechuga. Las variables
pueden tomar dos valores: i y d, que simbolizan respectivamente el
borde izquierdo y el borde derecho del rio. Por convención se elige
partir en el borde izquierdo. El estado inicial es entonces
estado(i,i,i,i). El estado objetivo es estado(d,d,d,d).
</p>
</div>
</div>

<div id="outline-container-orgdb4a306" class="outline-4">
<h4 id="orgdb4a306">Definición de las reglas de transición:</h4>
<div class="outline-text-4" id="text-orgdb4a306">
<p>
El arriero tiene cuatro acciones posibles: cruzar solo, cruzar con el
puma, cruzar con la cabra y cruzar con la lechuga. Estas acciones
están condicionadas a que ambos pasajeros del bote estén en la misma
orilla y a que no queden solos el puma con la cabra o la cabra con la
lechuga. El estado resultante de una acción se determina
intercambiando los valores i y d para los pasajeros del bote.
</p>
</div>
</div>

<div id="outline-container-org9a0ed44" class="outline-4">
<h4 id="org9a0ed44">Generación del espacio de estados</h4>
<div class="outline-text-4" id="text-org9a0ed44">
<p>
En este ejemplo se puede explicitar todo el espacio de estados (el
número de configuraciones está acotado por 24).
</p>


<div class="figure">
<p><img src="img/sd.png" alt="sd.png" />
</p>
</div>
</div>
</div>



<div id="outline-container-org9bdf8c2" class="outline-4">
<h4 id="org9bdf8c2">Problemas de los Canibales y Monjes</h4>
<div class="outline-text-4" id="text-org9bdf8c2">
<p>
Se tienen 3 monjes y 3 caníbales en el margen Oeste de un río. Existe
una canoa con capacidad para dos personas como máximo. Se desea que
los seis pasen al margen Este del río, pero hay que considerar que no
debe haber más caníbales que monjes en ningún sitio porque entonces
los caníbales se comen a los monjes. Además, la canoa siempre debe ser
conducida por alguien.<br />
</p>
</div>
</div>


<div id="outline-container-org3f85132" class="outline-4">
<h4 id="org3f85132">El espacio de estados está definido por</h4>
<div class="outline-text-4" id="text-org3f85132">
<p>
{(Mo, Co, Me, Ce, C) / Mo es el número de monjes en el margen oeste con
0&lt;=Mo&lt;=3<br />
 AND Co es el número de caníbales en el margen oeste con 0&lt;=Co&lt;=3
AND (Co&lt;=Mo OR Mo=0)<br />
 AND Me es el número de monjes en el margen este con
0&lt;=Me&lt;=3 <br />
AND Ce es el número de caníbales en el margen este con 0&lt;=Ce&lt;=3
AND (Ce&lt;=Me OR Me=0) AND Co+Ce=3 AND Mo+Me=3 AND C = [E|O] es el margen dónde está la canoa}<br />
</p>

<p>
El estado inicial es (3,3,0,0,O)
</p>

<p>
El estado final es (0,0,3,3,E)
</p>

<p>
Las reglas que se pueden aplicar son:
</p>

<ul class="org-ul">
<li>Viajan un monje y un caníbal de O a E:
Si (Mo, Co, Me, Ce, O) AND Mo&gt;=1 AND Co&gt;=1 AND Ce+1&lt;=Me+1 =&gt; (Mo-1, Co-1, Me+1, Ce+1, E)</li>
<li>Viajan un monje y un caníbal de E a O:
Si (Mo, Co, Me, Ce, E) AND Me&gt;=1 AND Ce&gt;=1 AND Co+1&lt;=Mo+1=&gt; (Mo+1, Co+1, Me-1, Ce-1,O)</li>

<li>Viajan dos monjes de O a E:
Si (Mo, Co, Me, Ce, O) AND Mo&gt;=2 AND (Mo-2=0 OR Co&lt;=Mo-2) AND Ce&lt;=Me+2=&gt; (Mo-2, Co, Me+2, Ce, E)</li>

<li>Viajan dos monjes de E a O:
Si (Mo, Co, Me, Ce, E) AND Me&gt;=2 AND (Me-2=0 OR Ce&lt;=Me-2) AND Co&lt;=Mo+2 =&gt; (Mo+2, Co, Me-2, Ce, O)</li>

<li>Viajan dos caníbales de O a E:
Si (Mo, Co, Me, Ce, O) AND Co&gt;=2 AND (Me=0 OR Ce+2&lt;=Me) =&gt; (Mo, Co-2, Me, Ce+2, E)</li>

<li>Viajan dos caníbales de E a O:
Si (Mo, Co, Me, Ce, E) AND Ce&gt;=2 AND (Mo=0 OR Co+2&lt;=Mo) =&gt; (Mo, Co+2, Me, Ce-2, O)</li>

<li>Viaja un monje de O a E:
Si (Mo, Co, Me, Ce, O) AND Mo&gt;=1 AND (Mo-1=0 OR Co&lt;=Mo-1) AND Ce&lt;= Me+1 =&gt; (Mo-1, Co, Me+1, Ce, E)</li>

<li>Viaja un monje de E a O:
Si (Mo, Co, Me, Ce, E) AND Me&gt;=1 AND (Me-1=0 OR Ce&lt;=Me-1) AND Co&lt;=Mo+1 =&gt; (Mo+1, Co, Me-1, Ce,O)</li>

<li>Viaja un caníbal de O a E:
Si (Mo, Co, Me, Ce, O) AND Co&gt;=1 AND (Me=0 OR Ce+1&lt;=Me) =&gt; (Mo, Co-1, Me, Ce+1, E)</li>

<li>Viaja un caníbal de E a O:
Si (Mo, Co, Me, Ce, O) AND Ce&gt;=1 AND (Mo=0 OR Co+1&lt;=Mo) =&gt; (Mo, Co+1, Me, Ce-1, E)</li>
</ul>


<p>
Nota: En referencia a la regla 3 la condición Ce&lt;=Me+2 puede intuirse
como redundante. Esta condición no se cumple sólo en el caso Ce=3 y
Me=0. Pese a
</p>

<p>
que es un estado que pertenece al espacio de estados válidos, podemos
intuir que nunca se llega a tener 3 caníbales y ningún monje del lado
Este y la barca del lado Oeste. De todas maneras sólo se puede
eliminar si podemos demostrar formalmente la imposibilidad de esta
situación.
</p>

<p>
Un pasaje de estados para ir de (3,3,0,0,O) a (0,0,3,3,E) es el siguiente:
</p>

<p>
(3,3,0,0,O) =&gt; (3,1,0,2,E) =&gt; (3,2,0,1,O) =&gt; (3,0,0,3,E) =&gt; (3,1,0,2,O) =&gt;
(1,1,2,2,E) =&gt; (2,2,1,1,O) =&gt; (0,2,3,1,E) =&gt; (0,3,3,0,O) =&gt; (0,1,3,2,E) =&gt;
(0,2,3,1,O) =&gt;(0,0,3,3,E)
</p>
</div>
</div>
</div>

<div id="outline-container-org8a36c2b" class="outline-3">
<h3 id="org8a36c2b">Representación de espacio de estados</h3>
<div class="outline-text-3" id="text-org8a36c2b">
<p>
La primera pregunta es, como  
</p>
</div>
</div>

<div id="outline-container-orga660bda" class="outline-3">
<h3 id="orga660bda">El problema del n-Puzzle</h3>
<div class="outline-text-3" id="text-orga660bda">
</div>
<div id="outline-container-org228d3b0" class="outline-4">
<h4 id="org228d3b0">Caracterización de las búsquedas ciegas.</h4>
<div class="outline-text-4" id="text-org228d3b0">
<p>
La búsqueda ciega o no informada sólo utiliza información acerca de si
un estado es o no objetivo para guiar su procesu de búsqueda.
</p>

<p>
Los métodos de búsqueda ciega se pueden clasificar en dos grupos
básicos:
</p>

<ul class="org-ul">
<li><b>Métodos de búsqueda en anchura</b>: Son procedimientos de búsqueda nivel
a nivel. Para cada uno de los nodos de un nivel se aplican todos los
posibles operadores y no se expande ningún nodo de un nivel antes de
haber expandido todos los del nivel anterior.</li>

<li><b>Métodos de búsqueda en profundidad</b>: En estos procedimientos se realiza la búsqueda por
una sola rama del árbol hasta encontrar una solución o hasta que se tome la decisión de
terminar la búsqueda por esa dirección ( por no haber posibles operadores que aplicar sobre
el nodo hoja o por haber alcanzado un nivel de profundidad muy grande ) . Si esto ocurre
se produce una vuelta atrás ( backtracking ) y se sigue por otra rama hasta visitar todas
las ramas del árbol si es necesario.</li>
</ul>


<p>
A partir de los dos tipos de búsqueda anteriores surgió uno nuevo,
llamado método de búsqueda por profundización iterativa. El algoritmo
de búsqueda más representativo de esta nueva tendencia es el DFID
acrónimo de su nombre en inglés (Depth-First Iterative-Deepening).
</p>
</div>
</div>


<div id="outline-container-org2e032c8" class="outline-4">
<h4 id="org2e032c8">Caracterización de las búsquedas heurísticas.</h4>
<div class="outline-text-4" id="text-org2e032c8">
<p>
Las técnicas de búsqueda heurística se apoyan alc contrario de los
métodos de búsqueda ciega se apoyan en información adicional para
realizar su proceso de búsqueda. Para mejorar la eficiencia de la
búsqueda, estos algoritmos hacen uso de una función que realiza una
predicción del coste necesario para alcanzar la solución. La función
que guía el proceso toma el nombre de función heurística.
</p>

<p>
De todos los algoritmos de búsqueda heurística, uno destaca en
especial: el A*. Este algoritmo, a pesar de haber sido creado entorno
a los años 60, sigue en la actualidad siendo uno de los mas
utilizados. Desafortunadamente, es ineficiente en cuanto al uso de
memoria durante el proceso de búsqueda. Por ello, en las décadas de
los 80 y 90, aparecieron algoritmos basados en el propio A*, pero que
limitaban el uso de memoria. Dos de los algoritmos más representativos
de esta última tendencia son el IDA* (Iterative-Deepening A*) y el
SMA* (Simplified Memory-bounded A*).
</p>
</div>
</div>
</div>
</div>


<div id="outline-container-orgd3d16fd" class="outline-2">
<h2 id="orgd3d16fd">Técnicas de Búsqueda</h2>
<div class="outline-text-2" id="text-orgd3d16fd">
</div>
<div id="outline-container-orgbbd73db" class="outline-3">
<h3 id="orgbbd73db">Solución de problemas con búsqueda.</h3>
<div class="outline-text-3" id="text-orgbbd73db">
<p>
La solución de problemas es fundamental para la mayoría de las
aplicaciones de IA; existen principalmente dos clases de problemas que
se pueden resolver mediante procesos computables: aquéllos en los que
se utiliza un algoritmo determinista que garantiza la solución al
problema y las tareas complejas que se resuelven con la búsqueda de
una solución; de ésta última clase de problemas se ocupa la IA.
</p>

<p>
La solución de problemas requiere dos consideraciones:
</p>

<ul class="org-ul">
<li>Representación del problema en un espacio organizado.</li>
<li>La capacidad de probar la existencia del estado objetivo en dicho espacio.</li>
</ul>

<p>
Las anteriores premisas se traducen en: la determinación del estado
objetivo y la determinación del camino óptimo guiado por este objetivo
a través de una o más transiciones dado un estado inicial
</p>

<p>
El espacio de búsqueda, se le conoce como una colección de estados.
En general los espacios de búsqueda en los problemas de IA no son completamente conocidos de forma a priori.
De lo anterior ‘resolver un problema de IA’ cuenta con dos fases:\\[0.5cm]
</p>

<ul class="org-ul">
<li>La generación del espacio de estados</li>
<li>La búsqueda del estado deseado en ese espacio.</li>
</ul>

<p>
Debido a que "todo el espacio de búsqueda" de un problema es muy
grande, puede causar un bloqueo de memoria, dejando muy poco espacio
para el proceso de búsqueda. Para solucionar esto, se expande el
espacio paso a paso, hasta encontrar el estado objetivo.
</p>
</div>
</div>


<div id="outline-container-org88872a0" class="outline-3">
<h3 id="org88872a0">Espacios de Estados</h3>
<div class="outline-text-3" id="text-org88872a0">
<p>
Muchos de los problemas que pueden ser resueltos aplicando técnicas de inteligencia artificial se modelan en forma simbólica y
discreta definiendo las configuraciones posibles del universo estudiado. El problema se plantea entonces en términos de encontrar una configuración objetivo a partir de una configuración inicial dada, aplicando transformaciones válidas según el modelo del universo. La respuesta es la secuencia de transformaciones cuya aplicación succesiva lleva a la configuración deseada.
Los ejemplos más carácteristicos de esta categoría de problemas son los juegos (son universos restringidos fáciles de modelar). En un juego, las configuraciones del universo corresponden directamente a las configuraciones del tablero. Cada configuración es un estado que puede ser esquematizado gráficamente y representado en forma simbólica. Las transformaciones permitidas corresponden a las reglas o movidas del juego, formalizadas como transiciones de estado.
Entonces, para plantear formalmente un problema, se requiere precisar una representación simbólica de los estados y definir reglas del tipo condición   acción para cada una de las transiciones válidas dentro del universo modelado. La acción de una regla indica como modificar el estado actual para generar un nuevo estado. La condición impone restricciones sobre la aplicabilidad de la regla según el estado actual, el estado generado o la historia completa del proceso de solución.
El espacio de estados de un juego es un grafo cuyos nodos representan las configuraciones alcanzables (los estados válidos) y cuyos arcos explicitan las movidas posibles (las transiciones de estado). En principio, se puede construir cualquier espacio de estados partiendo del estado inicial, aplicando cada una de las reglas para generar los sucesores immediatos, y así succesivamente con cada uno de los nuevos estados generados (en la práctica, los espacios de estados suelen ser demasiado grandes para explicitarlos por completo).
Cuando un problema se puede representar mediante un espacio de estados, la solución computacional correspende a encontrar un camino desde el estado inicial a un estado objetivo.
</p>
</div>

<div id="outline-container-orgdc59bce" class="outline-4">
<h4 id="orgdc59bce">Deterministicos</h4>
<div class="outline-text-4" id="text-orgdc59bce">
<p>
El espacio de estados determinísticos contienen un único estado inicial y seguir la secuencia de estados para la solución. Los espacios de estados determinísticos son usados por los sistemas expertos.
Se puede describir asu vez, que un sistema es determinístico si, para un estado dado, al menos aplica una regla a él y de solo una manera.
</p>
</div>
</div>

<div id="outline-container-org9390cf3" class="outline-4">
<h4 id="org9390cf3">No Deterministicos</h4>
<div class="outline-text-4" id="text-org9390cf3">
<p>
El no determinístico contiene un amplio número de estados iniciales y sigue la secuencia de estados perteneciente al estado inicial del espacio. Son usados por sistemas de lógica difusa.
En otras palabras,  si más de una regla aplica a cualquier estado particular del sistema, o si una regla aplica a un estado particular del sistema en más de una manera, entonces el sistema es no determinístico.
</p>
</div>
</div>
</div>


<div id="outline-container-org7099a06" class="outline-3">
<h3 id="org7099a06">Métodos de Búsqueda</h3>
<div class="outline-text-3" id="text-org7099a06">
</div>
<div id="outline-container-orgfec89b4" class="outline-4">
<h4 id="orgfec89b4">Primero en anchura (breadthfirst)</h4>
<div class="outline-text-4" id="text-orgfec89b4">
<p>
En inglés, breadth-first search.
Si el conjunto open se maneja como una lista FIFO, es decir, como una cola, siempre se estará visitando primero los primeros estados en ser generados. El recorrido del espacio de estados se hace por niveles de profundidad.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #FCCE7B;">procedure</span> <span style="color: #DFDFDF;">Busqueda_en_amplitud</span> <span style="color: #51afef;">{</span>
   open <span style="color: #C57BDB;">()[</span>estado_inicial<span style="color: #C57BDB;">]</span>
   closed <span style="color: #C57BDB;">()</span> <span style="color: #C57BDB;">{}</span>
   <span style="color: #51afef;">while</span> <span style="color: #C57BDB;">(</span>open no <span style="color: #FCCE7B;">esta</span> <span style="color: #DFDFDF;">vacia</span><span style="color: #C57BDB;">)</span> <span style="color: #C57BDB;">{</span>
     remover el primer estado X de la <span style="color: #FCCE7B;">lista</span> <span style="color: #5cEfFF;">open</span>
     <span style="color: #51afef;">if</span> <span style="color: #7bc275;">(</span>X es un <span style="color: #FCCE7B;">estado</span> <span style="color: #DFDFDF;">objetivo</span><span style="color: #7bc275;">)</span> <span style="color: #51afef;">return</span> exito
     <span style="color: #51afef;">else</span> <span style="color: #7bc275;">{</span>
       generar el conjunto de sucesores del estado X
       agregar el estado X al conjunto closed
       eliminar sucesores que ya estan en open o en closed
       agregar el resto de los sucesores al final de open
     <span style="color: #7bc275;">}</span>
   <span style="color: #C57BDB;">}</span>
   <span style="color: #51afef;">return</span> fracaso
 <span style="color: #51afef;">}</span>

</pre>
</div>

<p>
Si el factor de ramificación es B y la profundidad a la cual se encuentra el estado objetivo más cercano es n, este algoritmo tiene una complejidad en tiempo y espacio de \(O(B^n)\).
Contrariamente a la búsqueda en profundidad, la búsqueda en amplitud garantiza encontrar el camino más corto.  
</p>
</div>
</div>

<div id="outline-container-orgda59fd4" class="outline-4">
<h4 id="orgda59fd4">Primero en profundidad (depthfirst).</h4>
<div class="outline-text-4" id="text-orgda59fd4">
<p>
En inglés, depth-first search.
Si el conjunto open se maneja como una lista LIFO, es decir, como un stack, siempre se estará
visitando primero los últimos estados en ser generados. Esto significa que si A genera B y C, y B
genera D, antes de visitar C se visita D, que está más alejado de la raiz A, o sea más profundo en
el árbol de búsqueda. El algoritmo tiene en este caso la tendencia de profundizar la búsqueda en
una rama antes de explorar ramas alternativas.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #FCCE7B;">procedure</span> <span style="color: #DFDFDF;">Busqueda_en_profundidad</span> <span style="color: #51afef;">{</span>
   open <span style="color: #C57BDB;">()</span> <span style="color: #C57BDB;">[</span>estado_inicial<span style="color: #C57BDB;">]</span>
   closed <span style="color: #C57BDB;">()</span> <span style="color: #C57BDB;">{}</span>
   <span style="color: #51afef;">while</span> <span style="color: #C57BDB;">(</span>open no <span style="color: #FCCE7B;">esta</span> <span style="color: #DFDFDF;">vacia</span><span style="color: #C57BDB;">)</span> <span style="color: #C57BDB;">{</span>
     remover el primer estado X de la <span style="color: #FCCE7B;">lista</span> <span style="color: #5cEfFF;">open</span>
     <span style="color: #51afef;">if</span> <span style="color: #7bc275;">(</span>X es un <span style="color: #FCCE7B;">estado</span> <span style="color: #DFDFDF;">objetivo</span><span style="color: #7bc275;">)</span> <span style="color: #51afef;">return</span> exito
     <span style="color: #51afef;">else</span> <span style="color: #7bc275;">{</span>
       generar el conjunto de sucesores del estado X
       agregar el estado X al conjunto closed
       eliminar sucesores que ya estan en open o en closed
       agregar el resto de los sucesores al principio de open
     <span style="color: #7bc275;">}</span>
   <span style="color: #C57BDB;">}</span>
   <span style="color: #51afef;">return</span> fracaso
 <span style="color: #51afef;">}</span>


</pre>
</div>

<p>
Considerando que la cantidad promedio de sucesores de los nodos visitados es B (llamado en inglés el
branching factor y en castellano el factor de ramificación), y suponiendo que la profundidad máxima alcanzada es n,
este algoritmo tiene una complejidad en tiempo de \(O(B^n)\) y, si no se considera el conjunto closed, una complejidad en
espacio de O(B × n). En vez de usar el conjunto closed, el control de ciclos se puede hacer descartando aquellos estados que aparecen en el camino generado hasta el momento (basta que cada estado generado tenga un puntero a su padre).
El mayor problema de este algoritmo es que puede "perderse" en una rama sin encontrar la solución. Además, si se encuentra una solución no se puede garantizar que sea el camino más corto.
</p>
</div>
</div>

<div id="outline-container-orgb00e139" class="outline-4">
<h4 id="orgb00e139">Búsqueda Heurística</h4>
<div class="outline-text-4" id="text-orgb00e139">
<p>
El algoritmo de búsqueda A* (pronunciado "A asterisco", "A estrella" o
"Astar" en inglés) se clasifica dentro de los algoritmos de búsqueda
en grafos de tipo heurístico o informado. Presentado por primera vez
en 1968 por Peter E. Hart, Nils J. Nilsson y Bertram Raphael, el
algoritmo A* encuentra, siempre y cuando se cumplan unas determinadas
condiciones, el camino de menor coste entre un nodo origen y uno
objetivo.<br />
</p>

<p>
El problema de algunos algoritmos de búsqueda en grafos informados,
como puede ser el algoritmo voraz, es que se guían en exclusiva por la
función heurística, la cual puede no indicar el camino de coste más
bajo, o por el coste real de desplazarse de un nodo a otro (como los
algoritmos de escalada), pudiéndose dar el caso de que sea necesario
realizar un movimiento de coste mayor para alcanzar la solución. Es
por ello bastante intuitivo el hecho de que un buen algoritmo de
búsqueda informada debería tener en cuenta ambos factores, el valor
heurístico de los nodos y el coste real del recorrido.
</p>

<p>
Así, el algoritmo A* utiliza una función de evaluación
\(f(n)=g(n)+h'(n)\), donde \(h'(n)\) representa el valor heurístico del
nodo a evaluar desde el actual, n, hasta el final, y \(g(n)\) \(g(n)\), el
coste real del camino recorrido para llegar a dicho nodo, n, desde el
nodo inicial. A* mantiene dos estructuras de datos auxiliares, que
podemos denominar abiertos, implementado como una cola de prioridad
(ordenada por el valor \(f(n)\) de cada nodo), y cerrados, donde se
guarda la información de los nodos que ya han sido visitados. En cada
paso del algoritmo, se expande el nodo que esté primero en abiertos, y
en caso de que no sea un nodo objetivo, calcula la \(f(n)\) de todos sus
hijos, los inserta en abiertos, y pasa el nodo evaluado a cerrados.
</p>

<p>
El algoritmo es una combinación entre búsquedas del tipo primero en
anchura con primero en profundidad: mientras que \(h'(n)\) tiende a
primero en profundidad, \(g(n)\) tiende a primero en anchura. De este
modo, se cambia de camino de búsqueda cada vez que existen nodos más
prometedores.
</p>
</div>



<ul class="org-ul">
<li><a id="orgb294875"></a>Propiedades<br />
<div class="outline-text-5" id="text-orgb294875">
<p>
Como todo algoritmo de búsqueda en amplitud, A* es un algoritmo
completo: en caso de existir una solución, siempre dará con ella.
</p>

<p>
Si para todo nodo n del grafo se cumple \(g(n)=0\), nos encontramos ante
una búsqueda voraz. Si para todo nodo n del grafo se cumple \(h(n)=0\),
A* se comporta como el algoritmo de Dijkstra.
</p>

<p>
Para garantizar la admisibilidad del algoritmo, la función \(h(n)\)
debe ser heurística admisible, esto es, que no sobrestime el coste
real de alcanzar el nodo objetivo, es decir, h(n) debe ser menor que
h*(n) para todo nodo no final.
</p>

<p>
Se garantiza que \(h(n)\) es
consistente (o monótona), es decir, que para cualquier nodo
\(n\) y cualquiera de sus sucesores, el coste estimado de
alcanzar el objetivo desde n no es mayor que el de alcanzar el sucesor
más el coste de alcanzar el objetivo desde el sucesor.
</p>
</div>
</li>



<li><a id="orge99fb90"></a>Complejidad<br />
<div class="outline-text-5" id="text-orge99fb90">
<p>
La complejidad computacional del algoritmo está íntimamente
relacionada con la calidad de la heurística que se utilice en el
problema. En el caso peor, con una heurística de pésima calidad, la
complejidad será exponencial, mientras que en el caso mejor, con una
buena \(h'(n)\), el algoritmo se
ejecutará en tiempo lineal. Para que esto último suceda, se debe
cumplir que
</p>

<p>
\[ h'(x)\leq g(y)-g(x)+h'(y)\] donde h' es una heurística óptima para el problema,
como por ejemplo, el coste real de alcanzar el objetivo.
</p>


<p>
El espacio requerido por A* para ser ejecutado es su mayor
problema. Dado que tiene que almacenar todos los posibles siguientes
nodos de cada estado, la cantidad de memoria que requerirá será
exponencial con respecto al tamaño del problema. Para solucionar este
problema, se han propuesto diversas variaciones de este algoritmo,
como pueden ser RTA*, IDA* o SMA*.
</p>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-orgf064401" class="outline-3">
<h3 id="orgf064401">Satisfacción de restricciones.</h3>
<div class="outline-text-3" id="text-orgf064401">
<p>
Los problemas pueden resolverse buscando en un espacio de estados, estos estados pueden evaluarse por heurísticas específicas para el dominio y probados para verificar si son estados meta.
Los componentes del estado, son equivalentes a un grafo de restricciones, los cuales están compuestos de:\\[0.5cm]
</p>

<ul class="org-ul">
<li><b>Variables</b>: Dominios (valores posibles para las variables).</li>
<li><b>Restricciones</b> (binarias) entre las variables.</li>
</ul>


<p>
Objetivo: encontrar un estado (una asignación completa de valores a las variables) Que satisface las restricciones.
</p>

<p>
En los Problemas de Satisfacción de Restricciones (PSR), los estados y
la prueba de meta siguen a una representación estándar, estructurada y
muy simple.
</p>

<p>
Ejemplos:
</p>

<ul class="org-ul">
<li>Crucigramas</li>
<li>Colorear mapas</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-orgad53e64" class="outline-2">
<h2 id="orgad53e64">Teoría de juegos.</h2>
<div class="outline-text-2" id="text-orgad53e64">
<p>
Siendo una de las principales capacidades de la inteligencia humana su
capacidad para resolver problemas, así como la habilidad para analizar
los elementos esenciales de cada problema, abstrayéndolos, el
identificar las acciones que son necesarias para resolverlos y el
determinar cuál es la estrategia más acertada para atacarlos, son
rasgos fundamentales.
</p>

<p>
Podemos definir la resolución de problemas como el proceso que
partiendo de unos datos iníciales y utilizando un conjunto de
procedimientos escogidos, es capaz de determinar el conjunto de pasos
o elementos que nos llevan a lo que denominaremos una solución óptima
o semi-óptima de un problema de planificación, descubrir una
estrategia ganadora de un juego, demostrar un teorema, reconocer
</p>

<p>
Una imagen, comprender una oración o un texto son algunas de las
tareas que pueden concebirse como de resolución.
</p>

<p>
Una gran ventaja que nos proporciona la utilización de los juegos es
que a través de ellos es muy fácil medir el éxito o el fracaso, por lo
que podemos comprobar si las técnicas y algoritmos empleados son los
óptimos. En comparación con otras aplicaciones de inteligencia
artificial, por ejemplo comprensión del lenguaje, los juegos no
necesitan grandes cantidades de algoritmos. Los juegos más utilizados
son las damas y el ajedrez.
</p>
</div>
</div>

<div id="outline-container-orgfc5d166" class="outline-2">
<h2 id="orgfc5d166">Grafos</h2>
<div class="outline-text-2" id="text-orgfc5d166">
<p>
Un grafo es un conjunto de puntos (vértices) en el espacio, que están conectados
por un conjunto de líneas (aristas). Otros conceptos básicos son:
Dos vértices son adyacentes si comparten la misma arista.
Los extremos de una arista son los vértices que comparte dicha arista.
Un grafo se dice que es finito si su número de vértices es finito.
</p>
</div>
</div>

<div id="outline-container-org8634b1d" class="outline-2">
<h2 id="org8634b1d">Tipos de grafos</h2>
<div class="outline-text-2" id="text-org8634b1d">
<p>
Existen dos tipos de grafos los no dirigidos y los dirigidos.
</p>

<p>
• <b>No dirigidos</b>: son aquellos en los cuales los lados no están orientados (No son
flechas). Cada lado se representa entre paréntesis, separando sus vértices por
comas, y teniendo en cuenta (Vi,Vj)=(Vj,Vi).
</p>

<p>
• <b>Dirigidos</b>: son aquellos en los cuales los lados están orientados (flechas).
Cada lado se representa entre ángulos, separando sus vértices por comas y
teniendo en cuenta &lt;Vi ,Vj&gt;!=&lt;Vj ,Vi&gt;. En grafos dirigidos, para cada lado &lt;A,B&gt;,
A, el cual es el vértice origen, se conoce como la cola del lado y B, el cual es
el vértice destino, se conoce como cabeza del lado.
</p>
</div>
</div>


<div id="outline-container-orgf36b044" class="outline-2">
<h2 id="orgf36b044">Machine Learning</h2>
<div class="outline-text-2" id="text-orgf36b044">
<p>
El aprendizaje automático o aprendizaje automatizado o aprendizaje de
máquinas (del inglés, machine learning) es el subcampo de las ciencias
de la computación y una rama de la inteligencia artificial, cuyo
objetivo es desarrollar técnicas que permitan que las computadoras
aprendan. Se dice que un agente aprende cuando su desempeño mejora con
la experiencia y mediante el uso de datos; es decir, cuando la
habilidad no estaba presente en su genotipo o rasgos de nacimiento.1​
"En el aprendizaje de máquinas un computador observa datos, construye
un modelo basado en esos datos y utiliza ese modelo a la vez como una
hipótesis acerca del mundo y una pieza de software que puede resolver
problemas".
</p>

<p>
En muchas ocasiones el campo de actuación del aprendizaje automático
se solapa con el de la estadística inferencial, ya que las dos
disciplinas se basan en el análisis de datos. Sin embargo, el
aprendizaje automático incorpora las preocupaciones de la complejidad
computacional de los problemas. Muchos problemas son de clase NP-hard,
por lo que gran parte de la investigación realizada en aprendizaje
automático está enfocada al diseño de soluciones factibles a esos
problemas. El aprendizaje automático también está estrechamente
relacionado con el reconocimiento de patrones. El aprendizaje
automático puede ser visto como un intento de automatizar algunas
partes del método científico mediante métodos matemáticos. Por lo
tanto es un proceso de inducción del conocimiento.
</p>

<p>
El aprendizaje automático tiene una amplia gama de aplicaciones,
incluyendo motores de búsqueda, diagnósticos médicos, detección de
fraude en el uso de tarjetas de crédito, análisis del mercado de
valores, clasificación de secuencias de ADN, reconocimiento del habla
y del lenguaje escrito, juegos y robótica.
</p>
</div>

<div id="outline-container-org8419ce6" class="outline-3">
<h3 id="org8419ce6">Tipos de Algoritmos</h3>
<div class="outline-text-3" id="text-org8419ce6">
<p>
Los diferentes algoritmos de Aprendizaje Automático se agrupan en una
taxonomía en función de la salida de los mismos. Algunos tipos de
algoritmos son:
</p>

<ul class="org-ul">
<li><b>Aprendizaje supervisado</b> : El algoritmo produce una función que
establece una correspondencia entre las entradas y las salidas
deseadas del sistema. Un ejemplo de este tipo de algoritmo es el
problema de clasificación, donde el sistema de aprendizaje trata de
etiquetar (clasificar) una serie de vectores utilizando una entre
varias categorías (clases). La base de conocimiento del sistema está
formada por ejemplos de etiquetados anteriores. Este tipo de
aprendizaje puede llegar a ser muy útil en problemas de
investigación biológica, biología computacional y bioinformática.</li>

<li><b>Aprendizaje no supervisado</b>: Todo el proceso de modelado se lleva a
cabo sobre un conjunto de ejemplos formado tan solo por entradas al
sistema. No se tiene información sobre las categorías de esos
ejemplos. Por lo tanto, en este caso, el sistema tiene que ser capaz
de reconocer patrones para poder etiquetar las nuevas entradas.</li>

<li><b>Aprendizaje semisupervisado</b>: Este tipo de algoritmos combinan los
dos algoritmos anteriores para poder clasificar de manera
adecuada. Se tiene en cuenta los datos marcados y los no marcados.</li>

<li><b>Aprendizaje por refuerzo</b>: El algoritmo aprende observando el mundo
que le rodea. Su información de entrada es el feedback o
retroalimentación que obtiene del mundo exterior como respuesta a
sus acciones. Por lo tanto, el sistema aprende a base de
ensayo-error. El aprendizaje por refuerzo es el más general entre
las tres categorías. En vez de que un instructor indique al agente
qué hacer, el agente inteligente debe aprender cómo se comporta el
entorno mediante recompensas (refuerzos) o castigos, derivados del
éxito o del fracaso respectivamente. El objetivo principal es
aprender la función de valor que le ayude al agente inteligente a
maximizar la señal de recompensa y así optimizar sus políticas de
modo a comprender el comportamiento del entorno y a tomar buenas
decisiones para el logro de sus objetivos formales.  Los principales
algoritmos de aprendizaje por refuerzo se desarrollan dentro de los
métodos de resolución de problemas de decisión finitos de Markov,
que incorporan las ecuaciones de Bellman y las funciones de
valor. Los tres métodos principales son: la Programación Dinámica,
los métodos de Monte Carlo y el aprendizaje de Diferencias
Temporales. Entre las implementaciones desarrolladas está AlphaGo,
un programa de IA desarrollado por Google DeepMind para jugar el
juego de mesa Go. En marzo de 2016 AlphaGo le ganó una partida al
jugador profesional Lee Se-Dol que tiene la categoría noveno dan y
18 títulos mundiales. Entre los algoritmos que utiliza se encuentra
el árbol de búsqueda Monte Carlo, también utiliza aprendizaje
profundo con redes neuronales. Puede ver lo ocurrido en el
documental de Netflix “AlphaGo”.</li>

<li><b>Transducción</b>: Similar al aprendizaje supervisado, pero no construye
de forma explícita una función. Trata de predecir las categorías de
los futuros ejemplos basándose en los ejemplos de entrada, sus
respectivas categorías y los ejemplos nuevos al sistema.</li>

<li><b>Aprendizaje multi-tarea</b>: Métodos de aprendizaje que usan
conocimiento previamente aprendido por el sistema de cara a
enfrentarse a problemas parecidos a los ya vistos. El análisis
computacional y de rendimiento de los algoritmos de aprendizaje
automático es una rama de la estadística conocida como teoría
computacional del aprendizaje. El aprendizaje automático las
personas lo llevamos a cabo de manera
automática ya que es un proceso tan sencillo para nosotros que ni nos
damos cuenta de cómo se realiza y todo lo que implica. Desde que
nacemos hasta que morimos los seres humanos llevamos a cabo diferentes
procesos, entre ellos encontramos el de aprendizaje por medio del cual
adquirimos conocimientos, desarrollamos habilidades para analizar y
evaluar a través de métodos y técnicas así como también por medio de
la experiencia propia. Sin embargo, a las máquinas hay que indicarles
cómo aprender, ya que si no se logra que una máquina sea capaz de
desarrollar sus habilidades, el proceso de aprendizaje no se estará
llevando a cabo, sino que solo será una secuencia repetitiva.</li>
</ul>
</div>
</div>

<div id="outline-container-orga79da67" class="outline-3">
<h3 id="orga79da67">Técnicas de clasificación</h3>
<div class="outline-text-3" id="text-orga79da67">
<ul class="org-ul">
<li><b>Árboles de decisiones</b>: Este tipo de aprendizaje usa un árbol de
decisiones como modelo predictivo. Se mapean observaciones sobre un
objeto con conclusiones sobre el valor final de dicho objeto. Los
árboles son estructuras básicas en la informática. Los árboles de
atributos son la base de las decisiones. Una de las dos formas
principales de árboles de decisiones es la desarrollada por Quinlan
de medir la impureza de la entropía en cada rama, algo que primero
desarrolló en el algoritmo ID3 y luego en el C4.5. Otra de las
estrategias se basa en el índice GINI y fue desarrollada por
Breiman, Friedman et alia. El algoritmo de CART es una
implementación de esta estrategia.5​</li>

<li><b>Reglas de asociación</b>: Los algoritmos de reglas de asociación
procuran descubrir relaciones interesantes entre variables. Entre
los métodos más conocidos se hallan el algoritmo a priori, el
algoritmo Eclat y el algoritmo de Patrón Frecuente.</li>

<li><b>Algoritmos genéticos</b>: Los algoritmos genéticos son procesos de
búsqueda heurística que simulan la selección natural. Usan métodos
tales como la mutación y el cruzamiento para generar nuevas clases
que puedan ofrecer una buena solución a un problema dado.</li>

<li><b>Redes neuronales artificiales</b>: Las redes de neuronas artificiales
(RNA) son un paradigma de aprendizaje automático inspirado en las
neuronas de los sistemas nerviosos de los animales. Se trata de un
sistema de enlaces de neuronas que colaboran entre sí para producir
un estímulo de salida. Las conexiones tienen pesos numéricos que se
adaptan según la experiencia. De esta manera, las redes neurales se
adaptan a un impulso y son capaces de aprender. La importancia de
las redes neurales cayó durante un tiempo con el desarrollo de los
vectores de soporte y clasificadores lineales, pero volvió a surgir
a finales de la década de 2000 con la llegada del aprendizaje
profundo.</li>

<li><b>Máquinas de vectores de soporte</b>: Las MVS son una serie de métodos
de aprendizaje supervisado usados para clasificación y
regresión. Los algoritmos de MVS usan un conjunto de ejemplos de
entrenamiento clasificado en dos categorías para construir un modelo
que prediga si un nuevo ejemplo pertenece a una u otra de dichas
categorías.</li>

<li><p>
<b>Algoritmos de agrupamiento</b> El análisis por agrupamiento
(clustering en inglés) es la clasificación de observaciones en
subgrupos —clusters— para que las observaciones en cada grupo se
asemejen entre sí según ciertos criterios. Las técnicas de
agrupamiento hacen inferencias diferentes sobre la estructura de los
datos; se guían usualmente por una medida de similitud específica y
por un nivel de compactamiento interno (similitud entre los miembros
de un grupo) y la separación entre los diferentes grupos.
</p>

<p>
El agrupamiento es un método de aprendizaje no supervisado y es una
técnica muy popular de análisis estadístico de datos.
</p></li>

<li><b>Redes bayesianas</b> Una red bayesiana, red de creencia o modelo
acíclico dirigido es un modelo probabilístico que representa una
serie de variables de azar y sus independencias condicionales a
través de un grafo acíclico dirigido. Una red bayesiana puede
representar, por ejemplo, las relaciones probabilísticas entre
enfermedades y síntomas. Dados ciertos síntomas, la red puede usarse
para calcular las probabilidades de que ciertas enfermedades estén
presentes en un organismo. Hay algoritmos eficientes que infieren y
aprenden usando este tipo de representación.</li>
</ul>
</div>
</div>


<div id="outline-container-orgb410667" class="outline-3">
<h3 id="orgb410667">Clasificador en Cascada</h3>
<div class="outline-text-3" id="text-orgb410667">
<p>
La detección de objetos usando un clasificador en cascada basado en
características de Haar es un método efectivo de detección de objetos
propuesto en 2001 por Paul Viola y Michael Jones en su artículo
"Detección rápida de objetos usando cascada mejorada de
características simples". Este es un método basado en el aprendizaje
automático en el que se entrena una función en cascada a partir de
muchas imágenes positivas y negativas. Luego se usa para detectar
objetos en otras imágenes.
</p>

<p>
El algoritmo requiere una gran cantidad de imágenes positivas
(imágenes faciales) e imágenes negativas (no imágenes faciales) para
entrenar al clasificador. Luego, necesitamos extraer características
de él. Para hacer esto, use la función Haar que se muestra en la
siguiente figura. Son como nuestros núcleos de convolución. Cada
característica es un valor único que se obtiene restando la suma de
píxeles debajo del rectángulo blanco de la suma de píxeles debajo del
rectángulo negro.
</p>


<div class="figure">
<p><img src="img/har.png" alt="har.png" />
</p>
</div>

<p>
Ahora, todos los tamaños y posiciones posibles de cada kernel se
utilizan para calcular muchas funciones. (Imagínese cuántos cálculos
genera. Incluso una ventana de 24x24 generará más de 160.000
características). Para el cálculo de cada característica, necesitamos
encontrar la suma de los píxeles debajo de los rectángulos blanco y
negro. Para resolver este problema, introdujeron la imagen general. No
importa qué tan grande sea su imagen, reducirá el cálculo de un píxel
dado a operaciones que involucren solo cuatro píxeles.
</p>

<p>
Pero de todas estas características que calculamos, la mayoría de
ellas no son relevantes. Por ejemplo, considere la siguiente
figura. La primera fila muestra dos buenas características. La primera
característica elegida pareció centrarse en la naturaleza del área de
los ojos, que generalmente es más oscura que las áreas de la nariz y
las mejillas. La segunda característica elegida se basa en que las
propiedades de los ojos son más oscuras que el puente de la nariz. Sin
embargo, aplicar la misma ventana en las mejillas o en cualquier otro
lugar es irrelevante. Entonces, ¿cómo elegimos la mejor función entre
más de 160.000 funciones?.
</p>


<div class="figure">
<p><img src="img/har2.png" alt="har2.png" />
</p>
</div>


<p>
Para ello, aplicamos todas las funciones a todas las imágenes de
entrenamiento. Para cada característica, encontrará el mejor umbral,
que divide el rostro en positivo y negativo. Obviamente, habrá errores
o clasificaciones erróneas. Elegimos las características con la tasa
de error más baja, lo que significa que son las características más
precisas para clasificar imágenes faciales y no faciales. (Este
proceso no es tan simple. Al principio, el peso de cada imagen es
igual. Después de cada clasificación, el peso de la imagen mal
clasificada aumentará. Luego se realizará el mismo proceso. Se
calculará la nueva tasa de error. También calcular Peso
nuevo. Continúe con este proceso hasta que se alcance la precisión o
la tasa de error requeridas o se encuentre el número requerido de
funciones.
</p>

<p>
El clasificador final es la suma ponderada de estos clasificadores
débiles. Se denomina clasificación débil porque no puede clasificar
imágenes por sí sola, sino que forma un clasificador fuerte junto con
otras clasificaciones. El documento dice que incluso 200 funciones
pueden proporcionar una detección de precisión del 95%. Su
configuración final tiene aproximadamente 6000 funciones. (Imagínese
reducir de más de 160.000 funciones a 6.000 funciones. Esto es una
gran ganancia).
</p>

<p>
Entonces ahora toma una foto. Toma cada ventana de 24x24. Aplicarle
6000 funciones. Busque caras. Vaya &#x2026; ¿No es esto ineficiente y
requiere mucho tiempo? Si. El autor tiene una buena solución para
esto.
</p>

<p>
En la imagen, la mayoría de las imágenes son áreas sin caras. Por lo
tanto, es mejor tener una manera fácil de verificar si la ventana no
es un área frontal. Si no es así, deséchelo todo de una vez y no lo
vuelva a procesar. En cambio, concéntrese en las áreas que pueden
tener caras. De esta forma, dedicaremos más tiempo a comprobar
posibles zonas faciales.
</p>

<p>
Con este fin, introdujeron el concepto de clasificadores en
cascada. En lugar de aplicar los 6000 componentes funcionales a una
ventana, estos componentes funcionales se agrupan en diferentes etapas
de clasificación y se aplican uno por uno. (Por lo general, las
primeras etapas contendrán muy pocas funciones). Si la ventana falla
en la primera etapa, se descarta. No consideramos sus funciones
restantes. Si pasa, se aplica la segunda etapa de la función y el
proceso continúa. La ventana a través de todas las etapas es un área
facial. ¡Qué tal este plan!
</p>

<p>
El detector del autor tiene más de 6000 características con 38 etapas,
con 1, 10, 25, 25 y 50 características en las primeras cinco
etapas. (Las dos funciones en la imagen de arriba son en realidad las
dos mejores funciones obtenidas de Adaboost). Según el autor, cada
subventana evaluó un promedio de 10 características de más de 6000
características.
</p>

<p>
Por lo tanto, esta es una explicación simple e intuitiva del principio
de funcionamiento de la detección de rostros Viola-Jones. Lea este
artículo para obtener más detalles o consulte las referencias en la
sección de otros recursos.
</p>
</div>

<div id="outline-container-org6cae5d1" class="outline-4">
<h4 id="org6cae5d1">Ejemplo de clasificación utilizando Haarcascades</h4>
<div class="outline-text-4" id="text-org6cae5d1">
<ul class="org-ul">
<li><a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">Clasificadores Haarcascades de la librería Opencv</a></li>
<li><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html">Tutorial Haarcascades</a></li>
<li><a href="https://docs.opencv.org/2.4/doc/user_guide/ug_traincascade.html">Entrenamiento Haarcascades</a></li>
</ul>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">import</span> numpy <span style="color: #51afef;">as</span> np
<span style="color: #51afef;">import</span> cv2 <span style="color: #51afef;">as</span> cv

<span style="color: #DFDFDF;">rostro</span> = cv.CascadeClassifier<span style="color: #51afef;">(</span><span style="color: #7bc275;">'haarcascade_frontalface_alt.xml'</span><span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">cap</span> = cv.VideoCapture<span style="color: #51afef;">(</span>0<span style="color: #51afef;">)</span>
<span style="color: #DFDFDF;">x</span>=<span style="color: #DFDFDF;">y</span>=<span style="color: #DFDFDF;">w</span>=<span style="color: #DFDFDF;">h</span>= 0 
<span style="color: #DFDFDF;">img</span> = 0
<span style="color: #DFDFDF;">count</span> = 0
<span style="color: #51afef;">while</span> <span style="color: #a991f1;">True</span>:
    <span style="color: #DFDFDF;">ret</span>, <span style="color: #DFDFDF;">frame</span> = cap.read<span style="color: #51afef;">()</span>
    <span style="color: #DFDFDF;">gray</span> = cv.cvtColor<span style="color: #51afef;">(</span>frame, cv.COLOR_BGR2GRAY<span style="color: #51afef;">)</span>
    <span style="color: #DFDFDF;">rostros</span> = rostro.detectMultiScale<span style="color: #51afef;">(</span>gray, 1.3, 5<span style="color: #51afef;">)</span>
    <span style="color: #51afef;">for</span><span style="color: #51afef;">(</span>x, y, w, h<span style="color: #51afef;">)</span> <span style="color: #51afef;">in</span> rostros:
        <span style="color: #DFDFDF;">m</span>= <span style="color: #C57BDB;">int</span><span style="color: #51afef;">(</span>h/2<span style="color: #51afef;">)</span>
        <span style="color: #DFDFDF;">frame</span> = cv.rectangle<span style="color: #51afef;">(</span>frame, <span style="color: #C57BDB;">(</span>x,y<span style="color: #C57BDB;">)</span>, <span style="color: #C57BDB;">(</span>x+w, y+h<span style="color: #C57BDB;">)</span>, <span style="color: #C57BDB;">(</span>0, 255, 0<span style="color: #C57BDB;">)</span>, 2<span style="color: #51afef;">)</span>
        <span style="color: #DFDFDF;">frame</span> = cv.rectangle<span style="color: #51afef;">(</span>frame, <span style="color: #C57BDB;">(</span>x,y+m<span style="color: #C57BDB;">)</span>, <span style="color: #C57BDB;">(</span>x+w, y+h<span style="color: #C57BDB;">)</span>, <span style="color: #C57BDB;">(</span>255, 0 ,0<span style="color: #C57BDB;">)</span>, 2 <span style="color: #51afef;">)</span>
        <span style="color: #DFDFDF;">img</span> = 180- frame<span style="color: #51afef;">[</span>y:y+h,x:x+w<span style="color: #51afef;">]</span>
        <span style="color: #DFDFDF;">count</span> = count + 1   
    
    <span style="color: #62686E;">#</span><span style="color: #62686E;">name = '/home/likcos/imgs/cara'+str(count)+'.jpg'</span>
    <span style="color: #62686E;">#</span><span style="color: #62686E;">cv.imwrite(name, frame)</span>
    cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'rostros'</span>, frame<span style="color: #51afef;">)</span>
    cv.imshow<span style="color: #51afef;">(</span><span style="color: #7bc275;">'cara'</span>, img<span style="color: #51afef;">)</span>
    
    <span style="color: #DFDFDF;">k</span> = cv.waitKey<span style="color: #51afef;">(</span>1<span style="color: #51afef;">)</span>
    <span style="color: #51afef;">if</span> k == 27:
        <span style="color: #51afef;">break</span>
cap.release<span style="color: #51afef;">()</span>
cv.destroyAllWindows<span style="color: #51afef;">()</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orge6165ff" class="outline-3">
<h3 id="orge6165ff">Segmentación de Color</h3>
<div class="outline-text-3" id="text-orge6165ff">
<p>
La segmentación de imágenes es un tema ampliamente estudiado para la
extracción y reconocimiento de objetos, de acuerdo a las
características de textura, color, forma, entre otros. Dependiendo de
la naturaleza del problema, las características de color de los
objetos pueden proporcionar información relevante sobre ellos. Por
ejemplo, la segmentación de imágenes de color ha sido aplicado en
diferentes áreas como análisis de alimentos, geología,
medicina entre otras.  Los trabajos que abordan la
segmentación de imágenes por características de color emplean
diferentes técnicas, pero las más empleadas son las redes
neuronales (RN) y métodos basado en agrupamiento,
específicamente, fuzzy c-means (FCM). Las RN son entrenadas
para reconocer colores específicos, es decir, estas son entrenadas con
los colores de la imagen a ser segmentada. Si se da una nueva imagen
la RN debe ser entrenada nuevamente. Al emplear métodos basados en
agrupamiento, se crean grupos de colores con características
similares. La desventaja con tales métodos es que se requiere definir
previamente la cantidad de grupos en que se divide la información; por
lo tanto, el número de grupos se define dependiendo de la naturaleza
de la escena.  Nuestra propuesta consiste en entrenar a la RN para
reconocer diferentes colores, tratando de emular la percepción humana
del color. Los seres humanos identifican principalmente los colores
por su cromaticidad, después por su intensidad [21]. Por ejemplo, si
se le pregunta a cualquier persona cual es el color de los cuadros (a)
y (b) de la Fig. 1, lo más seguro es que responderá “verde”; nótese
que el cuadro (a) es más brilloso que el cuadro (b) pero la
cromaticidad no cambia. Ahora, si se le vuelve a preguntar a esa misma
persona cual es el color de los cuadros (c) y (d) de la Fig. 1, lo más
seguro es que responda “rojo y rosa, respectivamente”; es importante
mencionar que los cuadros (c) y (d) tienen la misma intensidad pero
diferentes cromaticidades.
</p>





<div class="org-src-container">
<pre class="src src-python">
</pre>
</div>
</div>
</div>


<div id="outline-container-org38777dc" class="outline-3">
<h3 id="org38777dc">Árboles de decisión</h3>
<div class="outline-text-3" id="text-org38777dc">
<p>
Los árboles de decisión (DT) son un método de aprendizaje supervisado
no paramétrico que se utiliza para la clasificación y la regresión. El
objetivo es crear un modelo que prediga el valor de una variable de
destino mediante el aprendizaje de reglas de decisión simples
deducidas de las características de los datos. Un árbol puede verse
como una aproximación constante por partes.
</p>

<p>
en el siguiente ejemplo, los árboles de decisión aprenden de los datos
para aproximarse a una curva sinusoidal con un conjunto de reglas de
decisión if-then-else. Cuanto más profundo es el árbol, más complejas
son las reglas de decisión y más ajustado es el modelo
</p>


<div class="figure">
<p><img src="img/dtr.png" alt="dtr.png" />
</p>
</div>
</div>


<div id="outline-container-org6687fe5" class="outline-4">
<h4 id="org6687fe5">Elementos</h4>
<div class="outline-text-4" id="text-org6687fe5">
<p>
Los árboles de decisión están formados por nodos, vectores de números,
flechas y etiquetas.
</p>

<ul class="org-ul">
<li>Cada nodo se puede definir como el momento en el que se ha de tomar
una decisión de entre varias posibles, lo que va haciendo que a
medida que aumenta el número de nodos aumente el número de posibles
finales a los que puede llegar el individuo. Esto hace que un árbol
con muchos nodos sea complicado de dibujar a mano y de analizar
debido a la existencia de numerosos caminos que se pueden seguir.</li>
<li>Los vectores de números serían la solución final a la que se llega
en función de las diversas posibilidades que se tienen, dan las
utilidades en esa solución.</li>
<li>Las flechas son las uniones entre un nodo y otro y representan cada
acción distinta.</li>
<li>Las etiquetas se encuentran en cada nodo y cada flecha y dan nombre
a cada acción.</li>
</ul>
</div>
</div>

<div id="outline-container-org5f1f95d" class="outline-4">
<h4 id="org5f1f95d">Algunas ventajas de los árboles de decisión son:</h4>
<div class="outline-text-4" id="text-org5f1f95d">
<ul class="org-ul">
<li>Fácil de entender y de interpretar. Los árboles se pueden
visualizar.</li>

<li>Requiere poca preparación de datos. Otras técnicas a menudo
requieren la normalización de datos, es necesario crear variables
ficticias y eliminar valores en blanco. Sin embargo, tenga en cuenta
que este módulo no admite valores faltantes.</li>

<li>El costo de usar el árbol (es decir, predecir datos) es logarítmico
en la cantidad de puntos de datos usados ​​para entrenar el árbol.</li>
</ul>
<ul class="org-ul">
<li>Capaz de manejar datos numéricos y categóricos. Otras técnicas
suelen estar especializadas en analizar conjuntos de datos que
tienen un solo tipo de variable.</li>

<li>Capaz de manejar problemas de múltiples salidas.</li>

<li>Utiliza un modelo de caja blanca. Si una situación dada es
observable en un modelo, la explicación de la condición se explica
fácilmente mediante lógica booleana. Por el contrario, en un modelo
de caja negra (por ejemplo, en una red neuronal artificial), los
resultados pueden ser más difíciles de interpretar.</li>

<li>Posibilidad de validar un modelo mediante pruebas estadísticas. Eso
permite dar cuenta de la fiabilidad del modelo.</li>

<li>Tiene un buen desempeño incluso si sus supuestos son algo violados
por el verdadero modelo a partir del cual se generaron los dato</li>
</ul>
</div>
</div>

<div id="outline-container-org78a97ff" class="outline-4">
<h4 id="org78a97ff">Desventajas de los árboles de decisión:</h4>
<div class="outline-text-4" id="text-org78a97ff">
<ul class="org-ul">
<li>El aprendizaje de los  árboles de decisión pueden crear árboles demasiado
complejos que no generalizan bien los datos. Esto se llama
sobreajuste. Para evitar este problema, son necesarios mecanismos
como la poda, establecer el número mínimo de muestras requeridas en
un nudo de la hoja o establecer la profundidad máxima del árbol.</li>

<li>Los árboles de decisión pueden ser inestables porque pequeñas
variaciones en los datos pueden generar un árbol completamente
diferente. Este problema se mitiga mediante el uso de árboles de
decisión dentro de un conjunto.</li>

<li>Las predicciones de los árboles de decisión no son uniformes ni
continuas, sino aproximaciones constantes por partes, como se ve en
la figura anterior. Por lo tanto, no son buenos para la
extrapolación.</li>

<li>Se sabe que el problema de aprender un árbol de decisión óptimo es
NP-completo bajo varios aspectos de optimización e incluso para
conceptos simples. En consecuencia, los algoritmos prácticos de
aprendizaje del árbol de decisiones se basan en algoritmos
heurísticos, como el algoritmo voraz, en el que se toman decisiones
localmente óptimas en cada nodo. Dichos algoritmos no pueden
garantizar la devolución del árbol de decisión globalmente
óptimo. Esto se puede mitigar entrenando varios árboles en un alumno
de conjunto, donde las características y las muestras se muestrean
aleatoriamente con reemplazo.</li>

<li>Hay conceptos que son difíciles de aprender porque los árboles de
decisión no los expresan fácilmente, como XOR, paridad o problemas
de multiplexor.</li>

<li>Los aprendices de árboles de decisión crean árboles sesgados si
dominan algunas clases. Por lo tanto, se recomienda equilibrar el
conjunto de datos antes de ajustarlo al árbol de decisión.</li>
</ul>
</div>
</div>

<div id="outline-container-org7c88607" class="outline-4">
<h4 id="org7c88607">Ejemplo de Clasificación, Árbol de decisión scikit-learn</h4>
<div class="outline-text-4" id="text-org7c88607">
<p>
<b>DecisionTreeClassifier</b> es una clase capaz de realizar una
clasificación de varias clases en un conjunto de datos.
</p>

<p>
Al igual que con otros clasificadores, <b>DecisionTreeClassifier</b> toma
como entrada dos matrices: una matriz <b>X</b>, dispersa o densa, de forma
(n<sub>muestras</sub>, n<sub>características</sub>) que contiene las muestras de
entrenamiento, y una matriz <b>Y</b> de valores enteros, forma (n<sub>muestras</sub>),
que contiene las etiquetas de clase. para las muestras de
entrenamiento:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">from</span> sklearn <span style="color: #51afef;">import</span> tree
<span style="color: #DFDFDF;">X</span> = <span style="color: #51afef;">[</span><span style="color: #C57BDB;">[</span>0, 0<span style="color: #C57BDB;">]</span>, <span style="color: #C57BDB;">[</span>1, 1<span style="color: #C57BDB;">]</span><span style="color: #51afef;">]</span>
<span style="color: #DFDFDF;">Y</span> = <span style="color: #51afef;">[</span>0, 1<span style="color: #51afef;">]</span>
<span style="color: #DFDFDF;">clf</span> = tree.DecisionTreeClassifier<span style="color: #51afef;">()</span>
<span style="color: #DFDFDF;">clf</span> = clf.fit<span style="color: #51afef;">(</span>X, Y<span style="color: #51afef;">)</span>
clf.predict<span style="color: #51afef;">(</span><span style="color: #C57BDB;">[</span><span style="color: #7bc275;">[</span>2.,2.<span style="color: #7bc275;">]</span><span style="color: #C57BDB;">]</span><span style="color: #51afef;">)</span> 
</pre>
</div>


<p>
Despues de ajustarce el modelo se puede usar, para predecir la clase 
</p>
<div class="org-src-container">
<pre class="src src-python">clf.predict<span style="color: #51afef;">(</span><span style="color: #C57BDB;">[</span><span style="color: #7bc275;">[</span>2.,2.<span style="color: #7bc275;">]</span><span style="color: #C57BDB;">]</span><span style="color: #51afef;">)</span> 
<span style="color: #62686E;">#</span><span style="color: #62686E;">array([1])</span>
</pre>
</div>



<p>
En caso de que haya múltiples clases con la misma y mayor
probabilidad, el clasificador predecirá la clase con el índice más
bajo entre esas clases.
</p>

<p>
Como alternativa a generar una clase específica, se puede predecir la
probabilidad de cada clase, que es la fracción de muestras de
entrenamiento de la clase en una hoja:
</p>

<div class="org-src-container">
<pre class="src src-python">clf.predict_proba<span style="color: #51afef;">(</span><span style="color: #C57BDB;">[</span><span style="color: #7bc275;">[</span>2., 2.<span style="color: #7bc275;">]</span><span style="color: #C57BDB;">]</span><span style="color: #51afef;">)</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">array([[0., 1.]])</span>
</pre>
</div>


<p>
DecisionTreeClassifier es capaz tanto de clasificación binaria (donde
las etiquetas son [-1, 1]) como de clasificación multiclase (donde las
etiquetas son [0, …, K-1]).
</p>

<p>
Usando el conjunto de datos de Iris, podemos construir un árbol de la
siguiente manera:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">from</span> sklearn.datasets <span style="color: #51afef;">import</span> load_iris
<span style="color: #51afef;">from</span> sklearn <span style="color: #51afef;">import</span> tree
<span style="color: #51afef;">import</span> graphviz
<span style="color: #DFDFDF;">iris</span> = load_iris<span style="color: #51afef;">()</span>
<span style="color: #DFDFDF;">X</span>, <span style="color: #DFDFDF;">y</span> = iris.data, iris.target
<span style="color: #DFDFDF;">clf</span> = tree.DecisionTreeClassifier<span style="color: #51afef;">()</span>
<span style="color: #DFDFDF;">clf</span> = clf.fit<span style="color: #51afef;">(</span>X, y<span style="color: #51afef;">)</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">dot_data = tree.export_graphviz(clf, out_file=None) </span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">graph = graphviz.Source(dot_data)</span>
<span style="color: #62686E;">#</span><span style="color: #62686E;">graph.render("iris")</span>
<span style="color: #DFDFDF;">dot_data</span> = tree.export_graphviz<span style="color: #51afef;">(</span>clf, out_file=<span style="color: #a991f1;">None</span>, 
                                feature_names=iris.feature_names,  
                                class_names=iris.target_names,  
                                filled=<span style="color: #a991f1;">True</span>, rounded=<span style="color: #a991f1;">True</span>,  
                                special_characters=<span style="color: #a991f1;">True</span><span style="color: #51afef;">)</span>  
<span style="color: #DFDFDF;">graph</span> = graphviz.Source<span style="color: #51afef;">(</span>dot_data<span style="color: #51afef;">)</span> 
graph.view<span style="color: #51afef;">()</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #51afef;">print</span><span style="color: #51afef;">(</span><span style="color: #7bc275;">"Hola"</span><span style="color: #51afef;">)</span>
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-orgcfa6069" class="outline-2">
<h2 id="orgcfa6069">Bibliografía</h2>
<div class="outline-text-2" id="text-orgcfa6069">
<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="Russell">[Russell]</a> <a name="Russell"></a>Russell, Norvig & Rodríguez, Inteligencia artificial: un enfoque moderno, Pearson Educación (2004).</li>
</ul>
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Autor: Eduardo Alcaraz</p>
<p class="date">Created: 2024-02-02 vie 13:31</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
